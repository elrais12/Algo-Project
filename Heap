using System;

class HeapSortProject
{
    public void Sort(int[] array)
    {
        int n = array.Length;
        BuildMaxHeap(array, n);
        for (int i = n - 1; i > 0; i--)
        {
            Swap(array, 0, i);
            Heapify(array, 0, i); 
        }
    }

    private void BuildMaxHeap(int[] array, int n)
    {
        for (int i = n / 2 - 1; i >= 0; i--)
        {
            Heapify(array, i, n);
        }
    }

    private void Heapify(int[] array, int index, int heapSize)
    {
        int largest = index;
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;

        if (leftChild < heapSize && array[leftChild] > array[largest])
        {
            largest = leftChild;
        }

        if (rightChild < heapSize && array[rightChild] > array[largest])
        {
            largest = rightChild;
        }

        if (largest != index)
        {
            Swap(array, index, largest);
            Heapify(array, largest, heapSize); // Continue heapifying
        }
    }

    private void Swap(int[] array, int i, int j)
    {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    public void PrintArray(int[] array)
    {
        foreach (int element in array)
        {
            Console.Write(element + " ");
        }
        Console.WriteLine();
    }

    static void Main(string[] args)
    {
        int[] array = { 16, 14, 10, 8, 7, 9, 3, 2, 4, 1 };

        HeapSortProject sorter = new HeapSortProject();

        Console.WriteLine("Original Array:");
        sorter.PrintArray(array);

        sorter.Sort(array);

        Console.WriteLine("Sorted Array:");
        sorter.PrintArray(array);
    }
}
