
// Section 4
// عبد الرحمن سعيد رشاد الريس
// Abdullah Samir Nabil Abd-Elfatah 
// عبدالحكيم محمد عبدالحكيم حامد


using System;
using System.Collections.Generic;

class Edge : IComparable<Edge>
{
    public int Source { get; set; }
    public int Destination { get; set; }
    public int Weight { get; set; }

    public int CompareTo(Edge other)
    {
        return this.Weight.CompareTo(other.Weight);
    }
}

class Graph
{
    private int vertices;
    private List<Edge> edges;

    public Graph(int vertices)
    {
        this.vertices = vertices;
        edges = new List<Edge>();
    }

    public void AddEdge(int source, int destination, int weight)
    {
        edges.Add(new Edge { Source = source, Destination = destination, Weight = weight });
    }

    private int Find(int[] parent, int i)
    {
        if (parent[i] != i)
        {
            parent[i] = Find(parent, parent[i]);
        }
        return parent[i];
    }

    private void Union(int[] parent, int[] rank, int x, int y)
    {
        int rootX = Find(parent, x);
        int rootY = Find(parent, y);

        if (rank[rootX] < rank[rootY])
        {
            parent[rootX] = rootY;
        }
        else if (rank[rootX] > rank[rootY])
        {
            parent[rootY] = rootX;
        }
        else
        {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
    }

    public void KruskalMST()
    {
        edges.Sort();
        int[] parent = new int[vertices];
        int[] rank = new int[vertices];

        for (int i = 0; i < vertices; i++)
        {
            parent[i] = i;
            rank[i] = 0;
        }

        List<Edge> result = new List<Edge>();

        foreach (var edge in edges)
        {
            int root1 = Find(parent, edge.Source);
            int root2 = Find(parent, edge.Destination);

            if (root1 != root2)
            {
                result.Add(edge);
                Union(parent, rank, root1, root2);
            }
        }

        Console.WriteLine("Edges in the Minimum Spanning Tree:");
        foreach (var edge in result)
        {
            Console.WriteLine($"Source: {edge.Source}, Destination: {edge.Destination}, Weight: {edge.Weight}");
        }
    }

    static void Main(string[] args)
    {
        Graph graph = new Graph(4);

        graph.AddEdge(0, 1, 10);
        graph.AddEdge(0, 2, 6);
        graph.AddEdge(0, 3, 5);
        graph.AddEdge(1, 3, 15);
        graph.AddEdge(2, 3, 4);

        graph.KruskalMST();
    }
}
